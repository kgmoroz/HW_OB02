# Разработай систему управления учетными записями пользователей для небольшой компании.
# Компания разделяет сотрудников на обычных работников и администраторов.
# У каждого сотрудника есть уникальный идентификатор (ID), имя и уровень доступа.
# Администраторы, помимо обычных данных пользователей, имеют дополнительный уровень доступа и могут добавлять или удалять пользователя из системы.
#
# Требования:
# 1.Класс `User*: Этот класс должен инкапсулировать данные о пользователе: ID, имя и уровень доступа ('user' для обычных сотрудников).
# 2.Класс Admin: Этот класс должен наследоваться от класса User. Добавь дополнительный атрибут уровня доступа, специфичный для администраторов ('admin').
# Класс должен также содержать методы add_user и remove_user, которые позволяют добавлять и удалять пользователей из списка (представь, что это просто список экземпляров User).
# 3.Инкапсуляция данных: Убедись, что атрибуты классов защищены от прямого доступа и модификации снаружи. Предоставь доступ к необходимым атрибутам через методы (например, get и set методы).

class User:
    def __init__(self, id, name, level='user'):
        self.__id = id
        self.__name = name
        self.__level = level

class Admin(User):
    def __init__(self, id, name, level='admin'):
        super().__init__(id, name, level=level)

    def add_user(self, user):
        pass

    def remove_user(self, user):
        pass

Users = [
    User(1, 'Alex'),
    User(2, 'Max'),
    User(3, 'Sergey')
    Admin(4, 'Peter', level='admin'),
    Admin(5, 'Roman', level='admin')
]

